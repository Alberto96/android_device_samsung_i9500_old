From aff63ecacdb395efb29faff0c4b1ed67e8861d4a Mon Sep 17 00:00:00 2001
From: Ethan Chen <intervigil@gmail.com>
Date: Thu, 21 Nov 2013 13:02:24 -0800
Subject: [PATCH] Camera: Support obtaining camera memory from MemoryHeapIon

* Exynos 5 devices want the ION file descriptor from MemoryHeapIon

Change-Id: I9e445cf24c15713f713181667e7b7caa1a96592e
---
 services/camera/libcameraservice/Android.mk         |  4 ++++
 .../device1/CameraHardwareInterface.h               | 21 +++++++++++++++++++++
 2 files changed, 25 insertions(+)

diff --git a/services/camera/libcameraservice/Android.mk b/services/camera/libca
index 1a567b8..66fceff 100644
--- a/services/camera/libcameraservice/Android.mk
+++ b/services/camera/libcameraservice/Android.mk
@@ -69,6 +69,10 @@ ifeq ($(BOARD_HTC_3D_SUPPORT),true)
     LOCAL_CFLAGS += -DHTC_3D_SUPPORT
 endif
 
+ifeq ($(BOARD_NEEDS_MEMORYHEAPION),true)
+    LOCAL_CFLAGS += -DUSE_MEMORY_HEAP_ION
+endif
+
 LOCAL_MODULE:= libcameraservice
 
 include $(BUILD_SHARED_LIBRARY)
diff --git a/services/camera/libcameraservice/device1/CameraHardwareInterface.h 
index 2bdf827..94f4cbe 100644
--- a/services/camera/libcameraservice/device1/CameraHardwareInterface.h
+++ b/services/camera/libcameraservice/device1/CameraHardwareInterface.h
@@ -26,6 +26,9 @@
 #include <camera/CameraParameters.h>
 #include <system/window.h>
 #include <hardware/camera.h>
+#ifdef USE_MEMORY_HEAP_ION
+#include <binder/MemoryHeapIon.h>
+#endif
 
 namespace android {
 
@@ -493,7 +496,11 @@ private:
                          mBufSize(buf_size),
                          mNumBufs(num_buffers)
         {
+#ifdef USE_MEMORY_HEAP_ION
+            mHeap = new MemoryHeapIon(fd, buf_size * num_buffers);
+#else
             mHeap = new MemoryHeapBase(fd, buf_size * num_buffers);
+#endif
             commonInitialization();
         }
 
@@ -501,7 +508,11 @@ private:
                          mBufSize(buf_size),
                          mNumBufs(num_buffers)
         {
+#ifdef USE_MEMORY_HEAP_ION
+            mHeap = new MemoryHeapIon(buf_size * num_buffers);
+#else
             mHeap = new MemoryHeapBase(buf_size * num_buffers);
+#endif
             commonInitialization();
         }
 
@@ -533,14 +544,24 @@ private:
         camera_memory_t handle;
     };
 
+#ifdef USE_MEMORY_HEAP_ION
+    static camera_memory_t* __get_memory(int fd, size_t buf_size, uint_t num_bu
+                                         void *ion_fd)
+    {
+#else
     static camera_memory_t* __get_memory(int fd, size_t buf_size, uint_t num_bu
                                          void *user __attribute__((unused)))
     {
+#endif
         CameraHeapMemory *mem;
         if (fd < 0)
             mem = new CameraHeapMemory(buf_size, num_bufs);
         else
             mem = new CameraHeapMemory(fd, buf_size, num_bufs);
+#ifdef USE_MEMORY_HEAP_ION
+        if (ion_fd)
+            *((int *) ion_fd) = mem->mHeap->getHeapID();
+#endif
         mem->incStrong(mem);
         return &mem->handle;
     }
-- 
1.8.5.2

